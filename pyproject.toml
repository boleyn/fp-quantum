[project]
name = "fp-quantum"
version = "0.1.0"
description = "量子智能化功能点估算系统 - AI-powered Function Point Estimation System"
requires-python = ">=3.11"
authors = [
    {name = "boleyn", email = "genxm@vip.qq.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["function-point", "estimation", "nesma", "cosmic", "ai", "langchain"]

dependencies = [
    # LangChain核心生态
    "langchain>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-openai>=0.2.0",      # OpenAI兼容API支持（DeepSeek + BGE-M3）
    "langgraph>=0.2.0",
    "langgraph-checkpoint>=2.0.0",
    
    # 所有模型通过OpenAI兼容API调用
    "openai>=1.0.0",                # 统一的API客户端
    
    # 向量存储集成
    "langchain-chroma>=0.1.0",      # 开发环境向量存储
    "langchain-mongodb>=0.2.0",     # MongoDB Atlas向量搜索
    "chromadb>=0.5.0",              # Chroma向量数据库
    
    # 数据库驱动
    "motor>=3.6.0",                 # MongoDB异步驱动
    "pymongo>=4.8.0",               # MongoDB同步驱动
    "asyncpg>=0.29.0",              # PostgreSQL异步驱动
    "psycopg2-binary>=2.9.0",       # PostgreSQL同步驱动
    "pgvector>=0.3.0",              # PostgreSQL向量扩展
    "sqlalchemy>=2.0.0",            # ORM框架
    
    # 文档处理（LangChain内置）
    "pypdf>=4.3.0",                 # PDF处理
    "unstructured>=0.15.0",         # 结构化文档解析
    "beautifulsoup4>=4.12.0",       # HTML解析
    "markdown>=3.6.0",              # Markdown处理
    
    # Web框架
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.5.0",
    
    # 工具库
    "tiktoken>=0.7.0",              # Token计算
    "pyyaml>=6.0.0",                # YAML配置
    "python-dotenv>=1.0.0",         # 环境变量
    "tenacity>=8.0.0",              # 重试机制
    "rich>=13.0.0",                 # 控制台输出美化
    "typer>=0.12.0",                # CLI接口
    
    # 数据处理和可视化
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "plotly>=5.17.0",
    "matplotlib>=3.7.0",
    
    # 日志和监控
    "loguru>=0.7.0",
    "prometheus-client>=0.19.0",
    
    # 测试和验证
    "jsonschema>=4.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "ipython>=8.12.0",
    "jupyter>=1.0.0",
]

web = [
    "streamlit>=1.28.0",
    "gradio>=4.0.0",
    "jinja2>=3.1.0",
]

enterprise = [
    "redis>=4.6.0",                # 缓存支持
    "celery>=5.3.0",               # 异步任务队列
    "flower>=2.0.0",               # Celery监控
    "sentry-sdk>=1.40.0",          # 错误监控
]

[project.urls]
Repository = "https://github.com/boleyn/fp-quantum.git"
"Bug Tracker" = "https://github.com/boleyn/fp-quantum/issues"

[project.scripts]
fp-quantum = "main:main"
setup-kb = "scripts.setup_knowledge_base:main"
migrate-data = "scripts.data_migration:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fp_quantum"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fp_quantum"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = [
    "agents",
    "api", 
    "config",
    "graph",
    "knowledge_base",
    "models",
    "scripts"
] 